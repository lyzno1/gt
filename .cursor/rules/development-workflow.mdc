---
description: 
globs: 
alwaysApply: false
---
# GT 开发工作流指南

## 开发环境设置

### 前置要求
- Rust 1.70+ (参考 [rust-toolchain.toml](mdc:rust-toolchain.toml))
- Git 2.0+
- GitHub CLI (gh) - 用于 GitHub 集成功能

### 项目设置
```bash
# 克隆项目
git clone <repository-url>
cd gt

# 构建项目
cargo build

# 运行测试
cargo test

# 检查代码质量
make check
```

## 开发流程

### 1. 代码格式化
使用项目配置的格式化规则：
- [rustfmt.toml](mdc:rustfmt.toml) - Rust 代码格式化配置
- [clippy.toml](mdc:clippy.toml) - Clippy lint 配置

```bash
# 格式化代码
cargo fmt

# 运行 clippy 检查
cargo clippy --all-targets --all-features -- -D warnings
```

### 2. 构建和测试
使用 [Makefile](mdc:Makefile) 中定义的任务：

```bash
# 开发构建
make dev

# 运行所有检查
make check

# 发布构建
make release

# 清理构建文件
make clean
```

### 3. 功能开发

#### 添加新命令
1. 在 [src/commands/](mdc:src/commands) 目录下创建新文件
2. 在 [src/cli/args.rs](mdc:src/cli/args.rs) 中添加命令定义
3. 在 [src/cli/router.rs](mdc:src/cli/router.rs) 中添加路由处理
4. 更新 [src/commands/mod.rs](mdc:src/commands/mod.rs) 导出新命令

#### 命令实现模板
```rust
// src/commands/new_command.rs
use crate::error::{GtResult, GtError};
use crate::git::GitOps;
use crate::ui::{print_step, print_success};

pub struct NewCommand {
    // 命令选项
}

impl NewCommand {
    pub fn new(/* 参数 */) -> Self {
        Self { /* 初始化 */ }
    }
    
    pub async fn execute(self) -> GtResult<()> {
        print_step("执行新命令...");
        
        let git_ops = GitOps::new()?;
        
        // 实现命令逻辑
        
        print_success("命令执行成功！");
        Ok(())
    }
}
```

### 4. Git 操作扩展
在 [src/git/](mdc:src/git) 目录下扩展 Git 功能：

- [src/git/repository.rs](mdc:src/git/repository.rs) - 核心仓库操作
- [src/git/branch.rs](mdc:src/git/branch.rs) - 分支管理
- [src/git/commit.rs](mdc:src/git/commit.rs) - 提交操作
- [src/git/remote.rs](mdc:src/git/remote.rs) - 远程操作

### 5. 错误处理
在 [src/error/types.rs](mdc:src/error/types.rs) 中定义新的错误类型：

```rust
#[derive(Debug, thiserror::Error)]
pub enum GtError {
    // 现有错误类型...
    
    #[error("新错误类型: {message}")]
    NewErrorType { message: String },
}
```

## 测试策略

### 单元测试
```bash
# 运行所有测试
cargo test

# 运行特定模块测试
cargo test git::

# 显示测试输出
cargo test -- --nocapture
```

### 集成测试
在 [tests/](mdc:tests) 目录下创建集成测试：

```rust
// tests/integration_test.rs
use gt::cli::Cli;
use clap::Parser;

#[tokio::test]
async fn test_command_execution() {
    // 测试命令执行
}
```

### 手动测试
```bash
# 预演模式测试（安全）
cargo run -- --dry-run start test-branch

# 详细输出测试
cargo run -- --verbose status

# 帮助信息测试
cargo run -- --help
cargo run -- start --help
```

## 调试技巧

### 日志调试
```bash
# 设置日志级别
RUST_LOG=debug cargo run -- start test
RUST_LOG=trace cargo run -- start test

# 只显示 GT 相关日志
RUST_LOG=gt=debug cargo run -- start test
```

### 编译时调试
```bash
# 显示编译警告
cargo build 2>&1 | grep warning

# 运行 clippy 获取建议
cargo clippy

# 检查未使用的依赖
cargo +nightly udeps
```

## 贡献指南

### 代码风格
- 遵循 [rustfmt.toml](mdc:rustfmt.toml) 配置
- 通过所有 clippy 检查
- 添加适当的文档注释
- 使用有意义的变量和函数名

### 提交规范
```bash
# 提交信息格式
feat: 添加新功能
fix: 修复bug
docs: 更新文档
style: 代码格式化
refactor: 重构代码
test: 添加测试
chore: 构建工具或辅助工具的变动
```

### Pull Request 流程
1. Fork 项目
2. 创建功能分支
3. 实现功能并添加测试
4. 确保所有检查通过
5. 提交 Pull Request

### 文档更新
- 更新 [README.md](mdc:README.md) 中的功能说明
- 更新 [ARCHITECTURE.md](mdc:ARCHITECTURE.md) 中的架构信息
- 添加或更新代码注释

## 发布流程

### 版本管理
版本信息在 [Cargo.toml](mdc:Cargo.toml) 中管理：

```toml
[package]
name = "gt"
version = "0.1.0"  # 更新版本号
```

### 构建发布版本
```bash
# 发布构建
make release

# 安装到本地
make install

# 卸载
make uninstall
```

### 安装脚本
使用 [install.sh](mdc:install.sh) 进行安装：

```bash
# 运行安装脚本
./install.sh

# 或使用 make
make install
```

## 常见问题解决

### 网络连接问题
```bash
# 临时禁用 SSL 验证
git config --global http.sslVerify false

# 配置代理
git config --global http.proxy http://proxy:port
```

### 编译问题
```bash
# 清理并重新构建
cargo clean
cargo build

# 更新依赖
cargo update
```

### 测试失败
```bash
# 运行单个测试
cargo test test_name -- --exact

# 忽略网络相关测试
cargo test -- --skip network
```
